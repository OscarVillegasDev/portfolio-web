---
// src/layouts/BaseLayout.astro

// 1. Imports de CSS globales
import '../css/style.css'; 
import '../css/language-switcher.css';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Lógica para el botón de cambio de idioma
const currentPath = Astro.url.pathname.substring(3); // Quita /en o /es
const otherLang = lang === 'es' ? 'en' : 'es';
const otherLangUrl = `/${otherLang}${currentPath}`;
---

<html lang={lang}>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PortfolioAPI - OEVM</title>

    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/driver.js@latest/dist/driver.js.iife.js" defer></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/driver.js@latest/dist/driver.css"/>
    <link rel="preload" href="/assets/bobGif.gif" as="image">

</head>
<body>
    <header class="top-bar">
        <div class="top-bar-content">
            <div class="language-switcher">
                <a href={lang === 'en' ? Astro.url.pathname : otherLangUrl} class:list={["lang-button", { active: lang === 'en' }]}>EN</a>
                <span class="lang-separator">/</span>
                <a href={lang === 'es' ? Astro.url.pathname : otherLangUrl} class:list={["lang-button", { active: lang === 'es' }]}>ES</a>
            </div>
            <button id="theme-toggle" class="theme-toggle-button" aria-label="Toggle dark/light theme">
                <i class="fas fa-sun"></i>
                <i class="fas fa-moon"></i>
            </button>
        </div>
    </header>
    
    <div class="page-wrapper">
        <slot />
    </div>
    
    <footer class="main-footer">
        <div class="footer-content">
            <div class="footer-links">{/* ... */}</div>
            <p class="footer-text">
                {t('footer_made_by')}
                <br>
                <span>&copy; {new Date().getFullYear()} {t('footer_reserved')}</span>
            </p>
            <p class="footer-note">{t('footer_note')}</p>
            <span>v2.1.0</span>
        </div>
    </footer>
    <script is:inline>
        // Función para aplicar el tema y guardarlo en localStorage
        const applyTheme = (theme) => {
            document.documentElement.classList.toggle('light-mode', theme === 'light');
            localStorage.setItem('portfolioTheme', theme);
        };

        // Obtener el tema guardado o usar 'dark' por defecto
        let currentTheme = localStorage.getItem('portfolioTheme') || 'dark';
        
        // Aplicar el tema tan pronto como se cargue la página
        applyTheme(currentTheme);

        // Añadir el listener al botón
        document.addEventListener('DOMContentLoaded', () => {
            const themeToggleButton = document.getElementById('theme-toggle');
            if (themeToggleButton) {
                themeToggleButton.addEventListener('click', () => {
                    currentTheme = currentTheme === 'dark' ? 'light' : 'dark';
                    applyTheme(currentTheme);
                });
            }
        });
    </script>

</body>
</html>